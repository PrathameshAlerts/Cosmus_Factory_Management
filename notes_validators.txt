Django provides various types of validations that you can use in your forms to ensure data 
integrity and user input correctness. Here are some of the common types of validations 
in Django:

- Built-in Field Validators:
    required: Ensures that the field is not empty.
    max_length and min_length: Defines the maximum and minimum length of a string field.
    max_value and min_value: Sets upper and lower limits for numeric fields.
    validators: Allows you to use custom or built-in validators.
    Example:

        from django import forms
        from django.core.validators import MaxValueValidator, MinLengthValidator

        class YourForm(forms.Form):
        field1 = forms.CharField(max_length=30, validators=[MinLengthValidator(5)])
        field2 = forms.IntegerField(validators=[MaxValueValidator(100)])

- Built-in Form Validators:

    clean_<fieldname> methods: Custom validations for individual fields.
    clean method: Form-level validation that involves multiple fields.
    Example:

        from django import forms

        class YourForm(forms.Form):
        field1 = forms.CharField()

        def clean_field1(self):
            data = self.cleaned_data['field1']
            # Your validation logic for field1
            return data

        def clean(self):
            cleaned_data = super().clean()
            # Your validation logic involving multiple fields
            return cleaned_data
            
- Model Field Validators:

    unique: Ensures the uniqueness of a field value in the database.
    Example:

    from django.db import models

    class YourModel(models.Model):
        field1 = models.CharField(unique=True)

- Built-in Validators Module:
Django provides a validators module with various ready-to-use validators like EmailValidator, URLValidator, RegexValidator, etc.
    Example:

        from django.core.validators import EmailValidator
        from django import forms

        class YourForm(forms.Form):
            email = forms.EmailField(validators=[EmailValidator(message='Enter a valid email address.')])

- Custom Validators:

    You can create your own custom validators by defining a function that takes a value as input and raises a ValidationError if the value is not valid.
    Example:


        from django.core.exceptions import ValidationError
        from django.utils.translation import gettext_lazy as _

        def validate_even(value):
        if value % 2 != 0:
            raise ValidationError(_('Value must be an even number.'))

- Built-in Model Field Options:

    Django model fields come with options like choices, blank, and null that indirectly affect the validation of the field.
    Example:

        from django.db import models

        class YourModel(models.Model):
        field1 = models.CharField(choices=[('option1', 'Option 1'), ('option2', 'Option 2')])
        field2 = models.CharField(blank=True, null=True)

These are just some of the common types of validations available in Django. The flexibility and extensibility of Django's form and model systems allow you to create complex validation logic tailored to your specific application requirements.




-clean() Method:

It is called after all individual field cleaning methods have been executed.
It can perform validation that involves multiple fields or the form as a whole.
It is suitable for validating interdependencies between fields.
It is not tied to a specific field; it has access to all cleaned_data.

def clean(self):
    cleaned_data = super().clean()
    # Perform validation involving multiple fields
    # Access cleaned data using cleaned_data dictionary



-clean_<fieldname> Method:

It is called automatically for the specific field during the form validation process.
It is responsible for cleaning and validating the value of a single field.
It is useful for field-specific validation logic.
It is associated with a particular field, and it has access to the cleaned value of that field.

def clean_fieldname(self):
    value = self.cleaned_data.get('fieldname')
    # Perform validation specific to the 'fieldname' field


In summary, clean() is a general-purpose method for form-wide validation,
while clean_<fieldname> is used for field-specific validation.
Depending on your requirements, you may use either or both methods in your form class.


_________________________________________________________________________________________

model field validators / writing custom validators / ModelForms

class Rating(models.Model):
    user = models.ForeignKey(User, on_delete = models.CASCADE)
    restaurant = models.ForeignKey(Restaurant, on_delete = models.CASCADE)
    rating = models.PositiveSmallIntegerField(
        validators = [MinValueValidator(1), MaxValueValidator(5)]
    )

these type of validators work on submission of form and not on direct query from conole
the form is validated with the help of full_clean()

Example

def run()
    user = User.objects.first()
    restaurant = Restaurant.objects.first()

    rating = Rating(user = user, restaurant=restaurant, rating = 9)
    rating.full_clean()
    rating.save()

We can also use the validators in forms 

from django import forms
from django.core.validators import MinValueValidator, MaxValueValidator
    
